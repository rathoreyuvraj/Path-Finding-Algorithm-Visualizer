{"version":3,"sources":["components/Node.js","algos/Dijiktras.js","algos/Astar.js","algos/GreedyBfs.js","algos/Dfs.js","algos/Bfs.js","algos/getNodeInShortestPath.js","components/Button.js","components/header.js","components/PathFinder.js","App.js","index.js"],"names":["Node","props","extraClassName","isStart","isEnd","isWall","id","row","col","className","onMouseDown","onMouseDownHandler","onMouseUp","onMouseUpHandler","onMouseEnter","onMouseEnterHandler","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","console","log","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","prev","Astar","heuristic","Math","abs","Greedybfs","Bfs","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","Button","addition","children","onClick","Header","onClickHandler","event","start","end","target","outerText","onAnimateShortestPath","pop","Dfs","onReset","newgrid","i","j","PathFinder","useState","setIsStart","setIsEnd","isMousePressed","setMousePressed","setStart","setEnd","setGrid","handleEvent","istart","animateShortestPath","setTimeout","document","getElementById","map","rowidx","nodeidx","gride","mouseDownHandler","mouseEnterHandler","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8a9d2ce5.chunk.js","sourcesContent":["import \"./Node.css\";\r\nconst Node = (props) => {\r\n  //console.log(props);\r\n  const extraClassName =\r\n    props.isStart === true\r\n      ? \"node-start\"\r\n      : props.isEnd === true\r\n      ? \"node-finish\"\r\n      : props.isWall === true\r\n      ? \"node-wall\"\r\n      : \"\";\r\n  return (\r\n    <div\r\n      id={`node-${props.row}-${props.col}`}\r\n      className={`node ${extraClassName}`}\r\n      onMouseDown={() => {\r\n        props.onMouseDownHandler(props.row, props.col);\r\n      }}\r\n      onMouseUp={() => {\r\n        props.onMouseUpHandler(props.row, props.col);\r\n      }}\r\n      onMouseEnter={() => {\r\n        props.onMouseEnterHandler(props.row, props.col);\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nexport default Node;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    console.log(closestNode);\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.prev = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export function Astar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes, finishNode);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.prev = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\r\n  unvisitedNodes.sort(\r\n    (nodeA, nodeB) =>\r\n      nodeA.distance +\r\n      heuristic(nodeA, finishNode) -\r\n      (nodeB.distance + heuristic(nodeB, finishNode))\r\n  );\r\n}\r\n\r\nfunction heuristic(node, finishNode) {\r\n  return (\r\n    Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col)\r\n  );\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export function Greedybfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes, finishNode);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = heuristic(neighbor, finishNode);\r\n    neighbor.prev = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction heuristic(node, finishNode) {\r\n  return (\r\n    Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col)\r\n  );\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export function Dfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = [];\r\n    console.log(startNode);\r\n    unvisitedNodes.push(grid[startNode.row][startNode.col]);\r\n    while (!!unvisitedNodes.length) {\r\n      //sortNodesByDistance(unvisitedNodes);\r\n      if (unvisitedNodes.length === 0) return visitedNodesInOrder;\r\n      const closestNode = unvisitedNodes.pop();\r\n      console.log(closestNode);\r\n      if (closestNode.isWall) continue;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid,unvisitedNodes);\r\n    }\r\n  }\r\n  \r\n//   function sortNodesByDistance(unvisitedNodes) {\r\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n//   }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid,unvisitedNodes) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.prev = node;\r\n      unvisitedNodes.push(neighbor);\r\n    }\r\n    // for(let u in unvisitedNeighbors){\r\n    //     unvisitedNodes.push(u);\r\n    // }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n  }\r\n  \r\n  // function getAllNodes(grid) {\r\n  //   const nodes = [];\r\n  //   for (const row of grid) {\r\n  //     for (const node of row) {\r\n  //       nodes.push(node);\r\n  //     }\r\n  //   }\r\n  //   return nodes;\r\n  // }\r\n  ","export function Bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      console.log(closestNode);\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.prev = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  ","export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.prev;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import './Button.css'\r\n\r\nconst Button = (props) => {\r\n    const addition = props.children === 'Reset' ? 'reset':'fill';\r\n    return <button className={addition} onClick={props.onClick} >{props.children}</button>\r\n}\r\nexport default Button;","import \"./header.css\";\r\nimport { dijkstra } from \"../algos/Dijiktras\";\r\nimport { Astar } from \"../algos/Astar\";\r\nimport { Greedybfs } from \"../algos/GreedyBfs\";\r\nimport { Dfs } from \"../algos/Dfs\";\r\nimport { Bfs } from \"../algos/Bfs\";\r\nimport { getNodesInShortestPathOrder } from \"../algos/getNodeInShortestPath\";\r\nimport Button from \"./Button\";\r\n\r\nconst Header = (props) => {\r\n  const onClickHandler = (event) => {\r\n    if (\r\n      props.start[0] !== -1 &&\r\n      props.start[1] !== -1 &&\r\n      props.end[0] !== -1 &&\r\n      props.end[1] !== -1\r\n    ) {\r\n      if (event.target.outerText === \"Dijiktras\") {\r\n        console.log(event.target.outerText);\r\n        const visitedNodesInOrder = dijkstra(\r\n          [...props.grid],\r\n          props.grid[props.start[0]][props.start[1]],\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        //console.log(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        props.onAnimateShortestPath(\r\n          visitedNodesInOrder,\r\n          nodesInShortestPathOrder\r\n        );\r\n      } else if (event.target.outerText === \"A-Star\") {\r\n        console.log(event.target.outerText);\r\n        const visitedNodesInOrder = Astar(\r\n          [...props.grid],\r\n          props.grid[props.start[0]][props.start[1]],\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        //console.log(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        props.onAnimateShortestPath(\r\n          visitedNodesInOrder,\r\n          nodesInShortestPathOrder\r\n        );\r\n      } else if (event.target.outerText === \"Greedy BFS\") {\r\n        console.log(event.target.outerText);\r\n        const visitedNodesInOrder = Greedybfs(\r\n          [...props.grid],\r\n          props.grid[props.start[0]][props.start[1]],\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        //console.log(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        props.onAnimateShortestPath(\r\n          visitedNodesInOrder,\r\n          nodesInShortestPathOrder\r\n        );\r\n      } else if (event.target.outerText === \"DFS\") {\r\n        console.log(event.target.outerText);\r\n        const visitedNodesInOrder = Dfs(\r\n          [...props.grid],\r\n          props.grid[props.start[0]][props.start[1]],\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        //console.log(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        props.onAnimateShortestPath(\r\n          visitedNodesInOrder,\r\n          nodesInShortestPathOrder\r\n        );\r\n      } else if (event.target.outerText === \"BFS\") {\r\n        console.log(event.target.outerText);\r\n        const visitedNodesInOrder = Bfs(\r\n          [...props.grid],\r\n          props.grid[props.start[0]][props.start[1]],\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n          props.grid[props.end[0]][props.end[1]]\r\n        );\r\n        //console.log(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        props.onAnimateShortestPath(\r\n          visitedNodesInOrder,\r\n          nodesInShortestPathOrder\r\n        );\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"headerdiv\">\r\n      <Button onClick={onClickHandler}>Dijiktras</Button>\r\n      <Button onClick={onClickHandler}>A-Star</Button>\r\n      <Button onClick={onClickHandler}>Greedy BFS</Button>\r\n      <Button onClick={onClickHandler}>DFS</Button>\r\n      <Button onClick={onClickHandler}>BFS</Button>\r\n\r\n      <Button onClick={props.onReset}>Reset</Button>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import \"./PathFinder.css\";\r\nimport Node from \"./Node\";\r\nimport { useState } from \"react\";\r\nimport Header from \"./header\";\r\n\r\nconst PathFinder = () => {\r\n  const [isStart, setIsStart] = useState(false);\r\n  const [isEnd, setIsEnd] = useState(false);\r\n  const [isMousePressed, setMousePressed] = useState(false);\r\n  const [start, setStart] = useState([-1, -1]);\r\n  const [end, setEnd] = useState([-1, -1]);\r\n  const [grid, setGrid] = useState(newgrid());\r\n  //console.log(start, end);\r\n  const mouseDownHandler = (row, col) => {\r\n    setMousePressed(true);\r\n    const gride = handleEvent([...grid], row, col);\r\n    setGrid(gride);\r\n  };\r\n\r\n  const mouseUpHandler = (row, col) => {\r\n    setMousePressed(false);\r\n  };\r\n\r\n  const mouseEnterHandler = (row, col) => {\r\n    if (isMousePressed === false) return;\r\n    const gride = handleEvent([...grid], row, col);\r\n    setGrid(gride);\r\n  };\r\n\r\n  function handleEvent(grid, row, col) {\r\n    if (\r\n      isStart === false &&\r\n      grid[row][col].isEnd === false &&\r\n      grid[row][col].isWall === false\r\n    ) {\r\n      setIsStart(true);\r\n      setStart([row, col]);\r\n      grid[row][col].isWall = false;\r\n      grid[row][col].isStart = true;\r\n      grid[row][col].isEnd = false;\r\n      return grid;\r\n    } else if (\r\n      isEnd === false &&\r\n      grid[row][col].isStart === false &&\r\n      grid[row][col].isWall === false\r\n    ) {\r\n      setIsEnd(true);\r\n      setEnd([row, col]);\r\n      grid[row][col].isWall = false;\r\n      grid[row][col].isEnd = true;\r\n      grid[row][col].istart = false;\r\n      return grid;\r\n    } else if (\r\n      grid[row][col].isWall === false &&\r\n      grid[row][col].isStart === false &&\r\n      grid[row][col].isEnd === false\r\n    ) {\r\n      grid[row][col].isWall = true;\r\n      grid[row][col].isStart = false;\r\n      grid[row][col].isEnd = false;\r\n      return grid;\r\n    }\r\n\r\n    if (isStart === true && grid[row][col].isStart === true) {\r\n      setIsStart(false);\r\n      setStart([-1, -1]);\r\n      grid[row][col].isWall = false;\r\n      grid[row][col].isStart = false;\r\n      grid[row][col].isEnd = false;\r\n      return grid;\r\n    } else if (isEnd === true && grid[row][col].isEnd === true) {\r\n      setIsEnd(false);\r\n      setEnd([-1, -1]);\r\n      grid[row][col].isWall = false;\r\n      grid[row][col].isEnd = false;\r\n      grid[row][col].isStart = false;\r\n      return grid;\r\n    } else if (grid[row][col].isWall === true) {\r\n      grid[row][col].isWall = false;\r\n      grid[row][col].isStart = false;\r\n      grid[row][col].isEnd = false;\r\n      return grid;\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length - 1; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) => {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  const ResetHandler = () => {\r\n    console.log(\"hh\");\r\n    setGrid(newgrid());\r\n    setStart([-1, -1]);\r\n    setIsStart(false);\r\n    setEnd([-1, -1]);\r\n    setIsEnd(false);\r\n    for (let i = 0; i < 20; i++) {\r\n      for (let j = 0; j < 50; j++) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        grid={grid}\r\n        start={start}\r\n        end={end}\r\n        onAnimateShortestPath={animateDijkstra}\r\n        onReset={ResetHandler}\r\n      />\r\n      <div className=\"grid\">\r\n        {grid.map((row, rowidx) => {\r\n          return (\r\n            <div key={rowidx}>\r\n              {row.map((node, nodeidx) => {\r\n                const { row, col, isStart, isEnd, isWall } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeidx}\r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart}\r\n                    isEnd={isEnd}\r\n                    isWall={isWall}\r\n                    onMouseDownHandler={(row, col) =>\r\n                      mouseDownHandler(row, col)\r\n                    }\r\n                    onMouseUpHandler={(row, col) => mouseUpHandler(row, col)}\r\n                    onMouseEnterHandler={(row, col) =>\r\n                      mouseEnterHandler(row, col)\r\n                    }\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction newgrid() {\r\n  const grid = [];\r\n  for (let i = 0; i < 20; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 50; j++) {\r\n      row.push({\r\n        row: i,\r\n        col: j,\r\n        isStart: false,\r\n        isEnd: false,\r\n        isWall: false,\r\n        distance: Infinity,\r\n        prev: null,\r\n        isVisited: false,\r\n      });\r\n    }\r\n    grid.push(row);\r\n  }\r\n  return grid;\r\n}\r\n\r\nexport default PathFinder;\r\n","import PathFinder from \"./components/PathFinder\";\nimport \"./app.css\";\n\nconst App = () => {\n  return (\n    <div className='center'>\n      <PathFinder />\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}